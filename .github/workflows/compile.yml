#
#
# 此文件为编译文件,一般情况下不使用这个来启动,运行build-openwrt.yml会自动触发编译
#
# 如果自动触发挂了的情况下，可以在这里选择好机型，选择 compile 启动编译
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#


name: compile
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'build/Lienol_source/start-up/start'

env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Warehouse: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 "${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source]
        
        # [Lede_source,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    steps:
    - name: 准备结束
      uses: actions/checkout@v2

    - name: 读取脚本设置
      id: organize
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "AUTOMATIC_AMLOGIC=${AUTOMATIC_AMLOGIC}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "Library=${Warehouse##*/}" >> $GITHUB_ENV
        echo "matrixtarget=${{matrix.target}}" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    
    - name: 电报机器人或pushplus信息通知
      if: env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TG'
      run: |
        if [ ${{steps.compile.outputs.status}} == 'success' ]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：您正在使用【${{matrix.target}}】文件夹编译固件中(${{env.Library}}仓库的#${{env.Run_number}}号),请耐心等待...... 😋" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        else
          echo "${steps.compile.outputs.status}"
        fi
