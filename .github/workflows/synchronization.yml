#
# 同步上游仓库或者清理发布都需要用REPO_TOKEN密匙
#
# 同一个仓库只需要存入一次密匙即可，这密匙基本是万能的，什么都能用上
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#
# 说明：
#
#  手动按钮启动时候参数为true时生效，为false是关闭项目启动
#
# ‘同步上游仓库’ 只有在手动启动时参数改为fork再启动才生效，同步仓库时会自动保留config配置文件和备份diy-part.sh文件
#
#


name: 同步上游仓库
on:
  workflow_dispatch:
    inputs:
      again-fork:
        description: 'fork-actions改fork开启同步上游仓库'
        required: false
        default: 'fork-actions'

#  schedule:
#    - cron: 10 4 * * *

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  del_runs:
    runs-on: Ubuntu-20.04
    name: 同步上游或清理仓库
    steps:
    
    - name: 准备结束
      uses: actions/checkout@v2
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
          
    - name: 整理数据
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        echo "BILDYML=$(grep "again-fork" -rl ${GITHUB_WORKSPACE}/.github |cut -d "/" -f9)" >> $GITHUB_ENV
        git clone -b main https://github.com/281677160/build-actions.git shangyou
        git clone -b main https://github.com/${{github.repository}}.git repogx
        if [[ -z "$(ls -A "repogx/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          cp -Rf shangyou/.github/workflows/synchronization.yml repogx/.github/workflows/build-openwrt.yml
        fi
        echo "CRON2=$(grep -A 1 'schedule:' repogx/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |cut -d "#" -f1 |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "CRON1=$(grep -A 1 'schedule:' shangyou/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        if [[ `grep 'cron:' repogx/.github/workflows/build-openwrt.yml |sed 's/^[ ]*//g' |grep '^-\ cron'` ]]; then
          sed -i 's/^#\(.*schedule:\)/\1/' shangyou/.github/workflows/build-openwrt.yml
          sed -i 's/^#\(.*- cron:\)/\1/' shangyou/.github/workflows/build-openwrt.yml
        fi
        echo "TARGET1=$(grep 'target: \[' shangyou/.github/workflows/build-openwrt.yml  |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGET2=$(grep 'target: \[' repogx/.github/workflows/build-openwrt.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "QIDONG1=$(grep -A 1 'paths:' shangyou/.github/workflows/compile.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')" >> $GITHUB_ENV
        echo "QIDONG2=- 'config'" >> $GITHUB_ENV
        echo "TARGE1=$(grep 'target: \[' shangyou/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGE2=$(grep 'target: \[' repogx/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        
    - name: 同步上游仓库
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        sed -i "s/${{env.CRON1}}/${{env.CRON2}}/g" shangyou/.github/workflows/build-openwrt.yml
        sed -i "s/${{env.TARGET1}}/${{env.TARGET2}}/g" shangyou/.github/workflows/build-openwrt.yml
        sed -i "s/${{env.TARGE1}}/${{env.TARGE2}}/g" shangyou/.github/workflows/compile.yml
        sed -i "s/${{env.QIDONG1}}/${{env.QIDONG2}}/g" shangyou/.github/workflows/compile.yml
        cd repogx
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          git rm -f $GITHUB_WORKSPACE/repo/.github/workflows/build-openwrt.yml
        fi
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/${{env.BILDYML}}" 2>/dev/null)" ]]; then
          git rm -f $GITHUB_WORKSPACE/repo/.github/workflows/${{env.BILDYML}}
        fi
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/compile.yml" 2>/dev/null)" ]]; then
          git rm -f $GITHUB_WORKSPACE/repo/.github/workflows/compile.yml
        fi
        cp -Rf build/Lede_source/diy-part.sh build/Lede_source/diy-part.sh.bak
        cp -Rf build/Lienol_source/diy-part.sh build/Lienol_source/diy-part.sh.bak
        cp -Rf build/Mortal_source/diy-part.sh build/Mortal_source/diy-part.sh.bak
        cp -Rf build/Tianling_source/diy-part.sh build/Tianling_source/diy-part.sh.bak
        cp -Rf build/openwrt_amlogic/diy-part.sh build/openwrt_amlogic/diy-part.sh.bak
        git rm build/*/diy-part.sh
        cp -Rf $GITHUB_WORKSPACE/shangyou/* ./
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github $GITHUB_WORKSPACE/repogx
        chmod -R +x $GITHUB_WORKSPACE/repogx
        git add .
        git commit -m "同步上游281677160/build-actions于$(date +%Y年%m月%d号%H时%M分%S秒)" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` == '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          echo "正在更新${{github.repository}}!"
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "更新完毕!"
        fi
