#
# 同步上游仓库或者清理发布都需要用REPO_TOKEN密匙
#
# 同一个仓库只需要存入一次密匙即可，这密匙基本是万能的，什么都能用上
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#
# 说明：
#
#  手动按钮启动时候参数为true时生效，为false是关闭项目启动
#
# ‘同步上游仓库’ 只有在手动启动时参数改为fork再启动才生效，同步仓库时会自动保留config配置文件和备份diy-part.sh文件
#
#


name: 同步上游仓库
on:
  workflow_dispatch:
    inputs:
      again-fork:
        description: '[fork-actions]改成[fork],再按[Run workflow]按钮启动,开启同步上游仓库'
        required: false
        default: 'fork-actions'

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  del_runs:
    runs-on: Ubuntu-20.04
    name: 同步上游仓库
    steps:
    
    - name: 准备结束
      uses: actions/checkout@v2
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
          
    - name: 整理数据
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        echo "BILDYML=$(grep "again-fork" -rl ${GITHUB_WORKSPACE}/.github |cut -d "/" -f9)" >> $GITHUB_ENV
        git clone -b main https://github.com/281677160/build-actions.git shangyou
        git clone -b main https://github.com/${{github.repository}}.git repogx
        cp -Rf repogx/build/Lede_source/diy-part.sh repogx/build/Lede_source/diy-part.sh.bak
        cp -Rf repogx/build/Lede_source/settings.ini repogx/build/Lede_source/settings.ini.bak
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/compile.yml" 2>/dev/null)" ]]; then
          git rm -f $GITHUB_WORKSPACE/repogx/.github/workflows/compile.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/compile.yml .github/workflows/compile.yml
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          git rm -f $GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/build-openwrt.yml .github/workflows/build-openwrt.yml
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/synchronization.yml .github/workflows/synchronization.yml
        cp -Rf $GITHUB_WORKSPACE/repogx/build/* shangyou/build
        if [[ -e $GITHUB_WORKSPACE/repogx/.github ]]; then
          cp -Rf $GITHUB_WORKSPACE/repogx/.github/* shangyou/.github
        fi
        cd shangyou
        git add .
        git commit -m "同步上游281677160/build-actions于$(date +%Y年%m月%d号%H时%M分%S秒)" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` == '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          echo "正在更新${{github.repository}}!"
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "同步完成，请注意查看[diy-part.sh]和[settings.ini]文件的变化和设置好!"
        fi
